# .github/workflows/eslint.yml

# Название воркфлоу
name: ESLint

# Триггеры для запуска
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '29 18 * * 4'

# Задачи, которые будут выполняться
jobs:
  eslint:
    name: Run ESLint Scan
    runs-on: ubuntu-latest
    
    # Разрешения, необходимые для загрузки результатов в раздел Security
    permissions:
      contents: read
      security-events: write
      actions: read # требуется для приватных репозиториев
      
    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Установка Node.js (лучшая практика)
      # Укажите здесь версию Node.js, которую использует ваш проект
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Например, LTS-версия 20.x
          cache: 'npm' # Включаем кэширование зависимостей для npm

      # 3. Установка всех зависимостей проекта (правильный способ)
      # npm ci устанавливает зависимости строго по файлу package-lock.json.
      # Это быстрее и надежнее, чем "npm install".
      # ESLint и все плагины должны быть в devDependencies вашего package.json.
      - name: Install dependencies
        run: npm ci

      # 4. Запуск ESLint для сканирования кода
      # Используем npx, чтобы запустить ESLint, установленный в node_modules
      - name: Run ESLint
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif
        # continue-on-error: true позволяет продолжить выполнение, даже если ESLint нашел ошибки,
        # чтобы отчет мог быть загружен.
        continue-on-error: true

      # 5. Загрузка результатов сканирования (SARIF) на GitHub
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true
